[[plugins]]
repo =  'Shougo/neosnippet.vim'
hook_add = '''
    " Plugin key-mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: pumvisible() ? "\<C-n>" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)"
    \: "\<TAB>"

    " For snippet_complete marker.
    if has('conceal')
      set conceallevel=0 concealcursor=i
    endif

    let g:neosnippet#snippets_directory = expand('~/.vim/snippet/')
'''


[[plugins]]
repo =  'Shougo/neosnippet-snippets'


[[plugins]]
repo =  'Shougo/deoplete.nvim'
if   = '''has('nvim')'''
hook_add = '''
    let g:deoplete#enable_at_startup = 1
'''


[[plugins]]
repo =  'Shougo/neocomplete.vim'
if   =  '''! has('nvim')'''
hook_add = '''
    let g:neocomplete#enable_at_startup = 1 
    let g:neocomplete#enable_smart_case = 1
    let g:neocomplete#enable_auto_select = 1

    "https://github.com/STAR-ZERO/dotfiles/blob/master/.vim/config/neocomplete.vim#L9
    function! s:my_crinsert()
      return pumvisible() ? neocomplete#close_popup() : "\<Cr>"
    endfunction
    inoremap <silent> <CR> <C-R>=<SID>my_crinsert()<CR>
'''


[[plugins]]
repo =  'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'active': {
        \   'left': [ [ 'mode' ], [ 'vcsinfo', 'readonly', 'filename' ] ],
        \   'right': [ [ 'lineinfo' ],
        \              [ 'percent' ],
        \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
        \ },
        \ 'component': {
        \   'readonly': '%{&readonly?"\ue0a2":""}'
        \ },
        \ 'component_function': {
        \   'vcsinfo': 'LightlineVCSinfo',
        \   'filename' : 'LightlineFile',
        \   'modified' : 'LightlineModified',
        \   'cwd' : 'LightlineCwd'
        \ },
        \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
        \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
        \ }

  "" tabline
  let g:lightline.tabline = { 'right' : [ ['cwd'] ] }
  let g:lightline.tab_component_function = {
        \ 'cwd': 'LightlineCwd'
  \}

  "" VCSの表示
  function! LightlineVCSinfo()
    "TODO svnやhgなどの対応
    try
      "git
      if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
        let head=fugitive#head()
        return  ''!=head ? "\ue0a0 ".head : ''
      endif
    catch
    endtry
    return ''
  endfunction

  "" ファイル名の表示
  function! LightlineFile()
    let filename=expand('%:t')
    if '' == filename
      return '[No Name]'
    else
      return filename . ' ' . LightlineModified()
  endfunction

  "" modifyの表示
  function! LightlineModified()
    return (&filetype=="help" ? "" : &modified ? "+" : &modifiable ? "" : "-")
  endfunction

  "" カレントディレクトリ
  function! LightlineCwd()
    let cwd=getcwd()
    if winwidth(0)/2 > strlen(cwd)
      return cwd
    else
      "" 画面の幅が小さい時には途中のディレクトリ名を頭文字だけで省略する
      let splited = split(cwd, "/")
      let res = ""
      for str in splited
        let res = res."/".str[0]
      endfor
      return res.splited[-1][1:]
    endif
  endfunction
'''

[[plugins]]
repo =  'itchyny/vim-cursorword'

[[plugins]]
repo =  'Lokaltog/vim-easymotion'
hook_add = '''
    map <Space> <Plug>(easymotion-prefix)
'''

[[plugins]]
repo =  'haya14busa/incsearch.vim'
hook_add =
'''
    map /  <Plug>(incsearch-forward)
    map ?  <Plug>(incsearch-backward)
    map g/ <Plug>(incsearch-stay)
'''


[[plugins]]
repo =  'kakkyz81/evervim'

[[plugins]]
repo =  'sudo.vim'

[[plugins]]
repo =  'tomtom/tcomment_vim'

[[plugins]]
repo =  'tpope/vim-fugitive'

[[plugins]]
repo =  'tyru/open-browser.vim'

[[plugins]]
repo =  'tyru/vim-altercmd' 

[[plugins]]
repo =  'osyo-manga/vim-over'

[[plugins]]
repo =  'vcscommand.vim'

[[plugins]]
repo =  'violetyk/scratch-utility'

[[plugins]]
repo =  'vim-scripts/gnuplot.vim'

[[plugins]]
repo =  'vim-scripts/mpi.vim'


[[plugins]]
repo =  'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {
  \   "cpp/g++" : {
  \       "cmdopt" : "-std=c++14",
  \       "hook/time/enable" : 1
  \   },
  \}
'''

[[plugins]]
repo = 'thinca/vim-template'
hook_add = '''
    autocmd User plugin-template-loaded call s:template_keywords()
    function! s:template_keywords()
      :silent! %s/<+FILE NAME+>/\=expand('%:t')/g
      :silent! %s/<+NAME+>/\=expand('%:r')/g
      :silent! %s/<+DATE+>/\=strftime('%Y-%m-%d')/g
      "bar_test.cpp -> bar  bar_test.py -> bar
      :silent! %s/<+TEST TARGET+>/\=split(expand('%:t'), '_test')[0]/g
      :silent! %s/<+MAIN TARGET+>/\=split(expand('%:t'), '_main')[0]/g
    endfunction

    " Move cursor
    autocmd User plugin-template-loaded
    \    if search('<+CURSOR+>')
    \  |   execute 'normal! "_da>'
    \  | endif
'''
